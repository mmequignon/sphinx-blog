Proper way to deal with python packages
=======================================

Today, in order to see what python packages I've installed with pip, I tried this to list them, and then : ::

    $ pip list
    ansible (2.2.1.0)
    apsw (3.13.0.post1)
    arandr (0.1.9)
    astroid (1.4.8)
    backports.functools-lru-cache (1.2.1)
    BeautifulSoup (3.2.1)
    beautifulsoup4 (4.5.3)
    blinker (1.4)
    chardet (2.3.0)
    CherryPy (3.5.0)
    configparser (3.5.0)
    cryptography (1.7.1)
    cssselect (1.0.1)
    cssutils (1.0)
    dnspython (1.15.0)
    docutils (0.12)
    enum34 (1.1.6)
    feedgenerator (1.9)
    feedparser (5.1.3)
    flake8 (3.2.1)
    […]
    futures (3.0.5)
    pygobject (3.22.0)
    pygtkspellcheck (4.0.5)
    python-apt (1.4.0b3)
    python-dateutil (2.5.3)
    python-debian (0.1.30)
    python-debianbts (2.6.1)
    pytz (2016.7)
    pyxdg (0.25)
    PyYAML (3.12)
    reportbug (6.6.6)
    repoze.lru (0.6)
    restructuredtext-lint (0.12.2)
    Routes (2.3.1)
    SecretStorage (2.3.1)
    setuptools (26.1.1)
    simplejson (3.10.0)
    six (1.10.0)
    trollius (2.1)
    Unidecode (0.4.19)
    uTidylib (0.3)
    virtualenv (15.1.0)
    webencodings (0.5)
    WebOb (1.6.2)
    wheel (0.29.0)
    wrapt (1.10.8)
    wxPython (3.0.2.0)
    wxPython-common (3.0.2.0)
    xmltodict (0.10.2)
    zim (0.65)

I must admit that I am just unable to say why I have all of these packages installed, nor to say what programs depends on them.
So I've decided to manage them in an other way.

What we want
------------

We want to deal our packages in a simple way.
An ideal way would be that when we do not need a programm anymore, I remove it, and its dependancies too.
It's actually possible.


What we need
------------

We will need a few packages ``virtualenv``, ``python-pip`` and ``python3-pip``.
To explain a little how it will work : 

  - We will create a folder /opt/envs in which we will create a virtualenv for each programm
  - In those virtualenvs, we will install each dependancies the programm will need

You will ask here, "Hey but, what if two or more programs needs the same python package ?"
Well, that's true, we will install it each time a program will depend on it.


Time to work
------------

pip installation ::

    apt install python3-pip

virtualenv installation ::

    pip3 install virtualenv

we will always use python3, so we will need to know it's absolute path : ::
    
    $ which python3
    /usr/bin/python3

So, in your ``.bashrc`` or ``.zshrc`` (or whatever, depending on what interpreter you use), add this line : ::

    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3

The goal is to not install a python package in our filesystem anymore.

Then, you can create a folder, make a virtualenv in it and start working, but there's something easier to use for this.
We can create a folder where we will create our virtualenvs : ::

    mkdir -p /opt/venvs

And install virtualenvwrapper via pip3 : ::

    pip3 install virtualenvwrapper

Now, we have to specify where virtualenvs will be created, so, add those lines in your .bashrc or .zshrc : ::
    
    export WORKON_HOME=/opt/venv
    source /usr/local/bin/virtualenvwrapper.sh

You can now use those commands to manage your virtualenvs : ::
    
    mkvirtualenv <venv_name> # to create <venv_name>
    workon nom_env # to activate <venv_name>
    rmvirtualenv <venv_name> # to delete <venv_name>

be aware that ``mkvirtualenv`` options are the same than ``virtualenv``.

For the example, we will create a virtual env for ``glances`` : ::

    $ mkvirtualenv glances
    (glances) $ pip install glances 
    Collecting glances
    Collecting psutil>=2.0.0 (from glances)
    Installing collected packages: psutil, glances
    Successfully installed glances-2.10 psutil-5.2.2

You can now exit the virtualenv and try this : ::

    /opt/venvs/glances/bin/glances

Let's try to watch this on your browser : ::
    
    $workon glances
    (glances) $ pip install bottle
    Collecting bottle
    Installing collected packages: bottle
    Successfully installed bottle-0.12.13

Exit your virtualenv and try this : ::

    /opt/venvs/glances/bin/glances -w

And try to access http://localhost:61208 from your favourite browser.
All right, now, I would create a systemd service of this.

First, create a file ``/etc/systemd/system/glances.service`` containing those lines : ::

    [Unit]
    Description=glances

    [Service]
    Type=simple
    ExecStart=/opt/venv/test/bin/glances -w

    [Install]
    WantedBy=multi-user.target

And activate it like that : ::

    systemctl enable glances.service

Now you can spawn glances as a service. And except pip, virtualenv and virtualenvwrapper, no additionnal package has been installed on your filesystem. ::

    $ pip list | grep glances 
    ∅

If one day you want to uninstall glances, just launch those commands : ::

    rmvirtualenv glances
    systemctl disable glances.service
    rm /etc/systemd/system/glances.service
